/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package databaseyedek;

import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

import jdk.nashorn.internal.runtime.regexp.joni.Regex;

/**
 *
 * @author ajanuser
 */
public class datajframe extends javax.swing.JFrame {
    public static File showPath=null;
    static final String JDBC_DRIVER = "org.apache.derby.jdbc.EmbeddedDriver";
    static final String DB_URL = "jdbc:derby:fahridb";
    static final String USER = "";
    static final String PASS = "";    
    Connection Conn = null;
    Statement Stmt = null;

    /**
     * Creates new form datajframe
     */
    public datajframe() {
        initComponents();
        //this.setFocusable(true);
        if(showPath==null)pathButton.setText("c:\\");
        else pathButton.setText(showPath.getPath());
  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userText = new javax.swing.JTextField();
        passwordText = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton5 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableListe = new javax.swing.JList<>();
        pathButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        liste = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        userText.setText("fahri");
        userText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                userTextKeyPressed(evt);
            }
        });

        passwordText.setText("123456");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jButton5.setText("BAGLAN");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        tableListe.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        tableListe.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                tableListeValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(tableListe);

        pathButton.setText("DATABASE PATH");
        pathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathButtonActionPerformed(evt);
            }
        });

        liste.setColumns(20);
        liste.setRows(5);
        jScrollPane4.setViewportView(liste);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(passwordText, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userText, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(pathButton, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 239, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(userText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(passwordText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pathButton))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                    .addComponent(jScrollPane4)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     ArrayList columnNames = new ArrayList();
     
        ArrayList data = new ArrayList();
        
    public void exportData(String tablename) {
 
            
liste.setText("");
        
            
        PrintWriter writer=null;
        try {
            
            String sql="";
            String temp = "";
            ResultSet rs=null;
            writer = new PrintWriter(tablename+".txt", "UTF-8");
            try {
                
                sql = "SELECT * FROM "+tablename;
                rs = Stmt.executeQuery(sql);
                
            ResultSetMetaData md = rs.getMetaData();
            int columns = md.getColumnCount();
            
            //  Get column names
            String cols="CREATE TABLE "+tablename+"(\n";
            for (int i = 1; i <= columns; i++)
            {
                columnNames.add( md.getColumnName(i) );
              //cols=cols+"\""+md.getColumnName(i)+"\" "+  md.getColumnTypeName(i)+" ("+ md.getColumnDisplaySize(i)+")\n";
                cols=cols+"\""+md.getColumnName(i)+"\" ";
                if( md.getColumnType(i)== Types.VARCHAR) cols=cols+  md.getColumnTypeName(i)+" ("+ md.getColumnDisplaySize(i)+")";
                if( md.getColumnType(i)== Types.INTEGER) cols=cols+  md.getColumnTypeName(i);
                if( md.getColumnType(i)== Types.BOOLEAN) cols=cols+  md.getColumnTypeName(i);
                if( md.getColumnType(i)== Types.DECIMAL) cols=cols+  md.getColumnTypeName(i)+" ("+md.getPrecision(i)+","+md.getScale(i) /*",1)"*/+")";
                if(md.isNullable(i)==0)cols=cols+" NOT NULL";
                if(i==1)cols=cols+" PRIMARY KEY";
                
                if(i<columns)cols=cols+",\n";else cols=cols+"\n";
            }
            cols=cols+")";
            jTextArea1.setText(cols);
            
              while (rs.next())
            {
                ArrayList row = new ArrayList(columns);
                temp="INSERT INTO "+tablename+" VALUES (";
                
                for (int i = 1; i <= columns; i++)
                {
                    //if(Pattern.matches("[a-zA-Z],[a-zA-Z][0-9]", rs.getObject(i).toString()) == true&&!rs.getObject(i).toString().equalsIgnoreCase("false")&&!rs.getObject(i).toString().equalsIgnoreCase("true"))
                    //if(Pattern.matches("[0-9]+(\\.[0-9][0-9]?)?", rs.getObject(i).toString()) == false&&!rs.getObject(i).toString().equalsIgnoreCase("false")&&!rs.getObject(i).toString().equalsIgnoreCase("true"))  
                    if(rs.getObject(i)!=null){    
                    if( md.getColumnType(i)== Types.VARCHAR) temp=temp+ "'"+rs.getObject(i).toString()+"'";
                    else
                    temp=temp+ rs.getObject(i).toString();
                    if(i<columns)temp=temp+",";}
                }
                temp=temp+(");");
                //data.add( row );
                writer.println(temp);
        liste.setText(liste.getText()+temp+"\n");
                 
            }
              
              
              
                /*for(int i=0;i<rs.getRow();i++)
                while (rs.next()) {
                    temp=rs.getString(i);//.compareTo(sql)
                    
                    if(temp.contains("[a-zA-Z]+") == true )
                    {
                        temp="'"+temp+"'";
                    }
                    temp=temp+";";
                    writer.print(rs.getString(i));i++;
                }
                writer.print(");");*/
                
            } catch (SQLException ex) {
                Logger.getLogger(datajframe.class.getName()).log(Level.SEVERE, null, ex);
            }
            writer.close();
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(datajframe.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(datajframe.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            writer.close();
        }

    }
 
    
    
           

        
        
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:

    char PressedChar = evt.getKeyChar();
    System.out.print(PressedChar);
 
    }//GEN-LAST:event_formKeyPressed

    private void userTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userTextKeyPressed
        // TODO add your handling code here:
  System.out.println("keyPressed");
    }//GEN-LAST:event_userTextKeyPressed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        if(showPath==null)baglan(userText.getText(),passwordText.getText(),"jdbc:derby:fahridb");
        else
        baglan(userText.getText(),passwordText.getText(),"jdbc:derby:"+showPath.getAbsolutePath().toString());
    }//GEN-LAST:event_jButton5ActionPerformed

    private void tableListeValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_tableListeValueChanged
        // TODO add your handling code here:
         exportData(tableListe.getSelectedValue());
    }//GEN-LAST:event_tableListeValueChanged

    private void pathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathButtonActionPerformed
        // TODO add your handling code here:
        String onlypath="C:\\";
                if(showPath!=null) onlypath=showPath.getPath();
                
        JFileChooser chooser = new JFileChooser();
        chooser.setPreferredSize(new Dimension(500,500));
        chooser.setCurrentDirectory(new File(onlypath.substring(0,onlypath.lastIndexOf(File.separator))));
        //chooser.setSelectedFile(showPath);
            //chooser.setSelectedFile(new File(Files.getNameWithoutExtension(showPath.getPath())));
            
            //chooser.setControlButtonsAreShown(false);
            chooser.setFileFilter(new FolderFilter());
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            //chooser.showOpenDialog(null);
                
            int returnVal = chooser.showOpenDialog(this);
            if (returnVal== JFileChooser.APPROVE_OPTION) {
                
                showPath=chooser.getSelectedFile();
                pathButton.setText(showPath.getPath());
                //ReadDirectory();

            }

    }//GEN-LAST:event_pathButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(datajframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(datajframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(datajframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(datajframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new datajframe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea liste;
    private javax.swing.JTextField passwordText;
    private javax.swing.JButton pathButton;
    private javax.swing.JList<String> tableListe;
    private javax.swing.JTextField userText;
    // End of variables declaration//GEN-END:variables

    private void baglan(String userName,String Password,String dataurl) {
    DefaultListModel listModel = new DefaultListModel();
    
        try{
            if(Conn!=null)if(!Conn.isClosed())Conn.close();
      Class.forName(JDBC_DRIVER);
      Conn = DriverManager.getConnection(dataurl,userName,Password);
      Stmt = Conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
                                      ResultSet.CONCUR_UPDATABLE);
             DatabaseMetaData md;
 
            md = Conn.getMetaData();
            ResultSet rs = md.getTables(null, null, "%", null);
while (rs.next()) {
    listModel.addElement(rs.getString(3));
  //System.out.println(rs.getString(3));
}
 tableListe.setModel(listModel);
    }catch(Exception e){
      //Handle errors for Class.forName
      e.printStackTrace();
    }
        
 
    }

private class FolderFilter extends javax.swing.filechooser.FileFilter {
  @Override
  public boolean accept( File file ) {
    return file.isDirectory();
  }

  @Override
  public String getDescription() {
    return "We only take directories";
  }
}


}
